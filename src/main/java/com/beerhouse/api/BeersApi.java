/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.beerhouse.api;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.beerhouse.model.Beer;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-06-05T22:58:55.295Z")

@Api(value = "beers", description = "the beers API")
public interface BeersApi {
	
	
    @ApiOperation(value = "Get Beers", nickname = "beersGet", notes = "", response = Beer.class, responseContainer = "List", authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Beer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucesso.", response = Beer.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Registro não encontrado."),
    	@ApiResponse(code = 415, message = "Tipo de Requisição não Suportada."),
        @ApiResponse(code = 500, message = "Erro interno no servidor")})
    @RequestMapping(value = "/beers",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Iterable<Beer>> beersGet();


    @ApiOperation(value = "Delete Beer by ID", nickname = "beersIdDelete", notes = "", authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Beer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deletado com sucesso."),
        @ApiResponse(code = 400, message = "Requisição Invalida."),
        @ApiResponse(code = 404, message = "Registro não encontrado."),
    	@ApiResponse(code = 415, message = "Tipo de Requisição não Suportada."),
        @ApiResponse(code = 500, message = "Erro interno no servidor")})
    @RequestMapping(value = "/beers/{id}",
        produces = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> beersIdDelete(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "Get Beer by Id", nickname = "beersIdGet", notes = "", response = Beer.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Beer", })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Sucesso."),
            @ApiResponse(code = 400, message = "Requisição Invalida."),
            @ApiResponse(code = 404, message = "Registro não encontrado."),
        	@ApiResponse(code = 415, message = "Tipo de Requisição não Suportada."),
            @ApiResponse(code = 500, message = "Erro interno no servidor")})
    @ResponseBody
    @RequestMapping(value = "/beers/{id}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Beer> beersIdGet(@ApiParam(value = "",required=true) @PathVariable("id") String id);

    @ApiOperation(value = "Changes name Beer", nickname = "beerIdPatch", notes = "", authorizations = {
            @Authorization(value = "BasicAuth")
        }, tags={ "Beer", })
        @ApiResponses(value = { 
            @ApiResponse(code = 204, message = "Alteração efeturada com sucesso!"),
            @ApiResponse(code = 400, message = "Requisição inválida."),
            @ApiResponse(code = 404, message = "Registro não encontrado."),
            @ApiResponse(code = 415, message = "Tipo de Requisição não Suportada."),
            @ApiResponse(code = 500, message = "Erro no servidor.") })
        @RequestMapping(value = "/beers/name/{id}",
        	produces = { "application/json" },
            method = RequestMethod.PATCH)
        ResponseEntity<Void> beersNameByIdPatch(@ApiParam(value = "",required=true) @PathVariable("id") Long id,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "name", required = true) String name);

    
    
    @ApiOperation(value = "Update Beer", nickname = "beersPut", notes = "", authorizations = {
    		@Authorization(value = "BasicAuth")
    }, tags={ "Beer", })
    @ApiResponses(value = { 
            @ApiResponse(code = 204, message = "Atualizado com sucesso."),
            @ApiResponse(code = 400, message = "Requisição Invalida."),
            @ApiResponse(code = 404, message = "Registro não encontrado."),
        	@ApiResponse(code = 415, message = "Tipo de Requisição não Suportada."),
            @ApiResponse(code = 500, message = "Erro interno no servidor")})
    @RequestMapping(value = "/beers/{id}",
    		produces = { "application/json" },
    		method = RequestMethod.PUT)
    ResponseEntity<Void> beersPut(@ApiParam(value = "" ,required=true ) @PathVariable("id") Long id,@NotNull @ApiParam(value = "", required = true) @Valid @RequestBody Beer body);
    

    @ApiOperation(value = "Save Beers", nickname = "beersPost", notes = "", response = Beer.class, authorizations = {
        @Authorization(value = "BasicAuth")
    }, tags={ "Beer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Cadastro efetuado com sucesso", response = Beer.class),
        @ApiResponse(code = 400, message = "Requisição Invalida."),
    	@ApiResponse(code = 415, message = "Tipo de Requisição não Suportada."),
        @ApiResponse(code = 500, message = "Erro interno no servidor")})
    @RequestMapping(value = "/beers",
        consumes = { "application/json" },
        produces = { "application/json" },
        method = RequestMethod.POST)
    @ResponseBody
    ResponseEntity<Beer> beersPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Beer body);

}
